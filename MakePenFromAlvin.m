%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%% Purpose:
%
% Program to read output from Alvin probe.  Input files for this
% program based on new probe acquisition program, written in Java by Eli
% Morris (UCSC), which has a different format from that generated by the
% original heatflow.c program (WHOI). New acquisition program is called 
% TempProbe.jar
%
% create PGC-formatted PEN files from data collected with
% Alvin/Jason heat flow probe. 

%% Modified May 2023 by RH 
% 
% create plot to allow selecting the timing of calibration, penetration,
% and heat pulse

%% Modifies November 2023 by KD
%
% reformat output to be compatible with new SlugHeat22
% outputs a new .pen text file and a new .mat binary MATLAB file with 
%
%% TO USE:
%   - Run code
%   - Answer input questions in command window
%   - Select timing of events in command window
%   - output .pen and .mat files will be saves in 'PensFrom Alvin'
%   subfolder.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% ================ %%
%% CALLING FUNCTION %%
%% ================ %%
function MakePenFromAlvin
clc
clear
uisetpref("clearall");


    %% Initialize
     [S,SPath] = uigetfile('*.txt'); 
    
    if ~exist('PensFromAlvin', 'dir')
        mkdir PensFromAlvin
    end
   
    
    
    %% If user chooses all PEN files in directory %%

        PenFileName=S;
        PenFilePath = SPath;
        PenFile = [SPath S];
    
       MakeSinglePen(PenFileName,PenFilePath, PenFile)
       
       disp(' ')
       disp('Done! Look in subfolder "PensFromAlvin" for new files')
    
end

function MakeSinglePen(PenFileName, PenFilePath,PenFile)
%% USER MUST DEFINE SOME PARAMETERS
     % Define number of sensors
     CruiseName = 'Jason Heat Flow';
     Penetration = input('Penenetration number? ','s');
     ProbeId = '-999';
     LoggerId = '-999';
     NoTherm = 5;
     Latitude = '-999';
     Longitude = '-999';
     DepthMean = '-999';
     TiltMean = '-999';
     PulsePower = '-999';
     Datum = '-999';
     hp_duration = 10; 
    
    % Initialize Storage Variables
    NumThermTotal = NoTherm ;
    time  = [];
    meas  = [];
    T1  = [];
    T2  = [];
    T3  = [];
    T4  = [];
    T5  = [];
    H   = [];
    
    h   = [];
    m   = [];
    s   = [];
    
    sitename=[];
    serialnumber=[];
    
    %Read header
    fid = fopen(PenFile,'r');
    line = fgetl(fid);
    line = fgetl(fid);  ind=find(line == ':');
    sitename=line(ind+2:end);
    line = fgetl(fid);  ind=find(line == ':');
    probe=line(ind+2:end);
    for i=1:3,
        line=fgetl(fid);
    end
    
    i=1;
    while i>0
        line = fgetl(fid);
        if line == -1;
            fclose(fid);
            i=0;
            break;
        else
            h=str2num(line(1:2));
            m=str2num(line(4:5));
            s=str2num(line(7:8));
    
            field=str2num(line(9:end));
            meas=[meas;field(1)];
            T1=[T1;field(2)];
            T2=[T2;field(3)];
            T3=[T3;field(4)];
            T4=[T4;field(5)];
            T5=[T5;field(6)];
            H=[H;field(7)];
        end
        i=i+1;
    end

    StationName = sitename;

    % define heat pulse power. Alvin probe records in W/m. Must convert to
    % J to fit SlugHeat22 PEN file format. Ask user heat pulse duration and
    % length of thermistor string

    gethp = input('Get het pulse power from raw text file? (y/n) ', 's');
    switch gethp
        case 'y'
            hp_duration = input('Heat pulse duration (s)?  ', 's');
            hp_duration = str2double(hp_duration);
            hp_string = input('Length of heat pulse wire? (m) ', 's');
            hp_string = str2double(hp_string);
            hp_power_Wm = mean(H(H~=0), 'omitnan');
            hp_power_Jm = hp_power_Wm*hp_duration; % J/m
            hp_power_J = hp_power_Jm*hp_string; % J
            PulsePower = num2str(hp_power_J);

        case 'n'
            PulsePower = '-999';
    end
    
    temps=[T1,T2,T3,T4,T5];
    mintemp=min(min(temps));
    maxtemp=max(max(temps));
    
    figure(1); clf
    sym=['kgrby'];
    for i=1:5
        tempplot = plot(temps(1:end,i),sym(i),'LineWidth',2, 'DisplayName',['T' num2str(i)]); hold on
    end
    xlabel('Measurement Number')
    ylabel('Temperature (C)')
    set(gca,'xtick', 0:20:max(tempplot.XData))
    
    i=1;
    while i > 0,
        bwton=input('Enter measurement number for BWT start  ');
        bwtoff=input('Enter measurement number for BWT end  ');
        pen=input('Enter measurement number for penetration  ');
        heat=input('Enter measurement number for heat on  ');
        pullout=input('Enter measurement number for pullout  ');
    
        plot([bwton,bwton],[mintemp,maxtemp],'k', 'DisplayName','start calibration')
        plot([bwtoff,bwtoff],[mintemp,maxtemp],'k', 'DisplayName','end calibration')
        plot([pen,pen],[mintemp,maxtemp],'k', 'DisplayName','start penetration')
        plot([heat,heat],[mintemp,maxtemp],'k', 'DisplayName','heat pulse')
        plot([pullout,pullout],[mintemp,maxtemp],'k', 'DisplayName','end penetration')
        legend
    
        ans=input('Do you accept measurement numbers (y/n)   ','s');
    %     ans='y';
        if ans == 'y', i=0; end
    end
    
    temps=[T1,T2,T3,T4,T5];

    % temps during calibration period for each sensor
    CalTemps = temps(bwton:bwtoff,:); % temps of each thermistor from start of calibration to end of calibration
    % Mean calibration temp data
    MeanCalTemps = mean(CalTemps, 1, 'omitnan');
    MeanCalTemps(isnan(MeanCalTemps))=-999;
   
    

%% WRITE .PEN FILE
%% ============== 
         %% Save variables used in .pen and .tap file for new .mat file
         %% ============================================================
        [nr,nc] = size(T1);
        WaterSensorRawData = repmat(-999, nr,nc);
        PenfileTemps = temps;
        BottomWaterRawData=MeanCalTemps;
        AllRecords = 1:length(T1); 
        AllRecords=AllRecords';

    % Use root of raw data filename to create penetration filename.
       fl = PenFileName(1:end-4);
       newpen = [pwd '/PensFromAlvin/' fl];
       fnout = [newpen,'.pen']; 
    %
    % First five lines of penetration file are structured to match PGC format
    % Line 1 : StationName, PenetrationNumber, CruiseName
    % Line 2 : Latitude, Longitude, Depth, Tilt
    % Line 3 : Logger ID, Probe ID, Number of Sensors
    % Line 4 : Penetration Record Start
    % Line 5 : Heat Pulse Record Start
       fido = fopen(fnout,'wt');

       hdrstr1 = [StationName,' ',Penetration,' ','''', CruiseName,'''', ' ',Datum];
       fprintf(fido,'%s\n',hdrstr1);
       hdrstr2 = [Latitude, '  ', Longitude,'  ', DepthMean, '  ',TiltMean];
       fprintf(fido,'%s\n',hdrstr2);
       hdrstr3 = [LoggerId,'  ',ProbeId,'  ',NoTherm, '  ', PulsePower];
       fprintf(fido,'%s\n',hdrstr3);
       fprintf(fido,'   %d\n',pen);
       fprintf(fido,'   %d\n',heat);
    %
       ip=5;
    % Ouptut Format for Mean Calibration Temps
       Fmt = '%8.3f ' ;
       Fmt = repmat(Fmt,1,NumThermTotal);
       FmtBW = ['%6s',Fmt, '\n'];
       fprintf(fido,FmtBW, '  ', MeanCalTemps);
    
    % Write rest of penetration file
       formpen=repmat('%8.3f ',1,ip);
       formpen=['%5.0f ' formpen '%8.0f \n'];
       allcolumns = [AllRecords,temps, WaterSensorRawData];
       i=1;
       while i<=size(temps,1)
          fprintf(fido,formpen,allcolumns(i,:));
          i=i+1;
       end
       fclose(fido);

         S_PENVAR = struct('BottomWaterRawData', BottomWaterRawData, 'AllRecords', ...
             AllRecords, 'CalibrationTemps', MeanCalTemps ,'AllSensorsRawData', PenfileTemps, 'WaterSensorRawData', WaterSensorRawData, ...
             'PenetrationRecord', pen, 'HeatPulseRecord', heat, 'EndRecord', ...
             pullout); %, 'EqmStartRecord');  BottomWaterStart_sequential, 'EqmEndRecord', BottomWaterEnd_sequential);
         
         
         % Create data structure to store input and output values 
         S_PenHandles = struct('CruiseName',CruiseName,'StationName',StationName,...
             'Penetration',Penetration,'ProbeId',ProbeId,'Datum',Datum,...
             'LoggerId',LoggerId,'NoTherm',num2str(NoTherm),'PulsePower', PulsePower, 'Latitude',Latitude,...
             'Longitude',Longitude,...
             'Tilt',TiltMean,'Depth',DepthMean) ;
         
         % Save .mat
         save([pwd '/PensFromAlvin/' fl '.mat'], 'S_PENVAR', 'S_PenHandles');
   
   
end

